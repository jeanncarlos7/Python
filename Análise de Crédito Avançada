from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
import logging
import math
import ssl

# Configuração de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Verifica se o módulo SSL está disponível
try:
    ssl.create_default_context()
    logger.info("SSL está configurado corretamente.")
except Exception as e:
    logger.error(f"Erro ao configurar SSL: {e}")

# Configuração do banco de dados SQLite
DATABASE_URL = "sqlite:///./risk_management.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Modelos do banco de dados
class Empresa(Base):
    __tablename__ = "empresas"
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, unique=True, index=True)
    cnpj = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    faturamento_anual = Column(Float)
    dividas = Column(Float)
    historico_pagamentos = Column(Float)
    solicitacoes_credito = relationship("SolicitacaoCredito", back_populates="empresa")

class SolicitacaoCredito(Base):
    __tablename__ = "solicitacoes_credito"
    id = Column(Integer, primary_key=True, index=True)
    empresa_id = Column(Integer, ForeignKey("empresas.id"))
    valor_solicitado = Column(Float)
    score_risco = Column(Float)
    status = Column(String, default="Em Análise")
    empresa = relationship("Empresa", back_populates="solicitacoes_credito")

# Criar tabelas no banco de dados
Base.metadata.create_all(bind=engine)

# Dependência do banco de dados
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Inicializa a aplicação
app = FastAPI(title="Sistema de Gestão de Risco de Crédito para Empresas", version="1.0")

@app.post("/empresa/cadastrar")
def cadastrar_empresa(nome: str, cnpj: str, email: str, faturamento_anual: float, dividas: float, historico_pagamentos: float, db: Session = Depends(get_db)):
    empresa_existente = db.query(Empresa).filter(Empresa.cnpj == cnpj).first()
    if empresa_existente:
        raise HTTPException(status_code=400, detail="Empresa já cadastrada com esse CNPJ")
    
    empresa = Empresa(
        nome=nome,
        cnpj=cnpj,
        email=email,
        faturamento_anual=faturamento_anual,
        dividas=dividas,
        historico_pagamentos=historico_pagamentos
    )
    db.add(empresa)
    db.commit()
    db.refresh(empresa)
    return {"mensagem": "Empresa cadastrada com sucesso", "empresa": empresa}

@app.post("/credito/analise")
def analise_credito(empresa_id: int, valor_solicitado: float, db: Session = Depends(get_db)):
    empresa = db.query(Empresa).filter(Empresa.id == empresa_id).first()
    if not empresa:
        raise HTTPException(status_code=404, detail="Empresa não encontrada")
    
    # Cálculo do Score de Risco
