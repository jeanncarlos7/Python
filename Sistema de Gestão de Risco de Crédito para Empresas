from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey
from sqlalchemy.orm import sessionmaker, relationship, declarative_base
import logging

# Configuração de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuração do banco de dados SQLite
DATABASE_URL = "sqlite:///./risk_management.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Modelos do banco de dados
class Empresa(Base):
    __tablename__ = "empresas"
    id = Column(Integer, primary_key=True, index=True)
    nome = Column(String, unique=True, index=True)
    cnpj = Column(String, unique=True, index=True)
    faturamento_anual = Column(Float)
    dividas = Column(Float)
    historico_pagamentos = Column(Float)
    solicitacoes_credito = relationship("SolicitacaoCredito", back_populates="empresa")

class SolicitacaoCredito(Base):
    __tablename__ = "solicitacoes_credito"
    id = Column(Integer, primary_key=True, index=True)
    empresa_id = Column(Integer, ForeignKey("empresas.id"))
    valor_solicitado = Column(Float)
    score_risco = Column(Float)
    status = Column(String, default="Em Análise")
    empresa = relationship("Empresa", back_populates="solicitacoes_credito")

# Criar tabelas no banco de dados
Base.metadata.create_all(bind=engine)

# Dependência do banco de dados
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Inicializa a aplicação
app = FastAPI(title="Sistema de Gestão de Risco de Crédito para Empresas", version="1.0")

@app.post("/empresa/cadastrar")
def cadastrar_empresa(nome: str, cnpj: str, faturamento_anual: float, dividas: float, historico_pagamentos: float, db: Session = Depends(get_db)):
    if db.query(Empresa).filter(Empresa.cnpj == cnpj).first():
        raise HTTPException(status_code=400, detail="CNPJ já cadastrado")
    nova_empresa = Empresa(
        nome=nome, cnpj=cnpj, faturamento_anual=faturamento_anual,
        dividas=dividas, historico_pagamentos=historico_pagamentos
    )
    db.add(nova_empresa)
    db.commit()
    db.refresh(nova_empresa)
    return nova_empresa

@app.post("/credito/solicitar")
def solicitar_credito(empresa_id: int, valor: float, db: Session = Depends(get_db)):
    empresa = db.query(Empresa).filter(Empresa.id == empresa_id).first()
    if not empresa:
        raise HTTPException(status_code=404, detail="Empresa não encontrada")
    
    # Cálculo simples de risco (poderia ser substituído por IA/ML)
    score_risco = (empresa.faturamento_anual - empresa.dividas) / (empresa.historico_pagamentos + 1)
    status = "Aprovado" if score_risco > 1 else "Rejeitado"
    
    nova_solicitacao = SolicitacaoCredito(
        empresa_id=empresa_id, valor_solicitado=valor, score_risco=score_risco, status=status
    )
    db.add(nova_solicitacao)
    db.commit()
    db.refresh(nova_solicitacao)
    return nova_solicitacao
