from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import numpy as np
import pickle
import os
import logging
from sklearn.ensemble import RandomForestClassifier
from typing import Dict
import ssl

# Configuração de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# Caminho do modelo pré-treinado
MODEL_PATH = "modelo_credito.pkl"

def carregar_modelo():
    """Carrega o modelo salvo ou cria um novo modelo se não existir."""
    if os.path.exists(MODEL_PATH):
        try:
            with open(MODEL_PATH, "rb") as f:
                return pickle.load(f)
        except Exception as e:
            logger.error(f"Erro ao carregar o modelo: {e}")
            raise HTTPException(status_code=500, detail="Erro ao carregar o modelo de crédito.")
    else:
        return treinar_modelo_fallback()

def treinar_modelo_fallback():
    """Treina um modelo fictício caso o modelo salvo não exista."""
    logger.warning("Modelo não encontrado. Treinando um modelo de fallback...")
    modelo = RandomForestClassifier(n_estimators=100, random_state=42)

    X_exemplo = np.array([
        [25, 5000, 2000, 700, 2, 30000],
        [45, 12000, 500, 800, 4, 100000],
        [35, 8000, 1000, 750, 3, 50000],
        [50, 20000, 3000, 600, 5, 200000],
        [28, 7000, 1500, 720, 2, 40000]
    ])
    y_exemplo = np.array([1, 1, 0, 0, 1])  # 1 = Aprovado, 0 = Negado

    modelo.fit(X_exemplo, y_exemplo)
    
    with open(MODEL_PATH, "wb") as f:
        pickle.dump(modelo, f)

    logger.info("Modelo de fallback treinado e salvo.")
    return modelo

# Carregando o modelo
try:
    modelo = carregar_modelo()
except Exception as e:
    logger.error(f"Falha ao carregar o modelo: {e}")
    modelo = None

# Estrutura dos dados de entrada para análise de crédito
class Cliente(BaseModel):
    idade: int = Field(..., gt=18, lt=100, description="Idade deve estar entre 18 e 100 anos.")
    renda_mensal: float = Field(..., gt=0, description="A renda mensal deve ser maior que zero.")
    dividas: float = Field(..., ge=0, description="O valor das dívidas não pode ser negativo.")
    historico_credito: int = Field(..., ge=300, le=850, description="O histórico de crédito deve estar entre 300 e 850.")
    quantidade_cartoes: int = Field(..., ge=0, description="O número de cartões de crédito não pode ser negativo.")
    valor_patrimonio: float = Field(..., ge=0, description="O valor do patrimônio não pode ser negativo.")

@app.post("/avaliar_credito")
def avaliar_credito(cliente: Cliente) -> Dict[str, object]:
    if modelo is None:
        raise HTTPException(status_code=500, detail="Modelo de crédito não está disponível.")
    
    entrada = np.array([[
        cliente.idade, cliente.renda_mensal, cliente.dividas,
        cliente.historico_credito, cliente.quantidade_cartoes, cliente.valor_patrimonio
    ]])
    
    try:
        previsao = modelo.predict(entrada)[0]
        return {"aprovado": bool(previsao), "mensagem": "Crédito aprovado." if previsao == 1 else "Crédito negado."}
    except Exception as e:
        logger.error(f"Erro na previsão do modelo: {e}")
        raise HTTPException(status_code=500, detail="Erro ao processar a solicitação de crédito.")
